version: "3.7"

services:
  traefik:
    image: traefik:v2.1.1
    networks:
      - public
    command:
      - --entrypoints.http.address=:80
#      - --entrypoints.https.address=:443
      - --providers.docker
#      - --providers.file.filename=/certs/certs.yml
#      - --providers.docker.swarmMode=true
      - --providers.docker.network=public
      - --providers.docker.exposedbydefault=false
      - --api.insecure
      - --api.dashboard=true # see https://docs.traefik.io/v2.0/operations/dashboard/#secure-mode for how to secure the dashboard
      - --api.debug=true # enable additional endpoints for debugging and profiling
      - --log.level=DEBUG # debug while we get it working
      - --accesslog=true
    ports:
      - 80:80
      - 443:44
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs
    labels:
      # Dashboard
      traefik.enable: "true"
#      traefik.http.routers.my-app.tls: "true"
      traefik.http.routers.traefik.entrypoints: http
      traefik.http.routers.traefik.rule: Host(`traefik.th.is`)
      traefik.http.routers.traefik.service: api@internal
#      traefik.http.routers.traefik.middlewares: authtraefik
#      Basic auth (login: user | password: password)
#      traefik.http.middlewares.authtraefik.basicauth.users: user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/

  whoami:
    image: containous/whoami:v1.3.0
    command:
      # It tells whoami to start listening on 8082 instead of 80
      - --port=8082
    networks:
      - public
    labels:
      traefik.enable: "true"
#      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.whoamientrypoints: http
      traefik.http.routers.whoami.rule: Host(`whoami.th.is`)
      traefik.http.services.whoami.loadbalancer.server.port: 8082
#      traefik.http.routers.whoami.middlewares: auth
#      Basic auth (login: user | password: password)
#      traefik.http.middlewares.auth.basicauth.users: user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 32M
        reservations:
          cpus: '0.05'
          memory: 10M

networks:
  public:
    external: true