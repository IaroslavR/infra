version: '3.7'

services:
  traefik:
    image: traefik:v2.1.1
    command:
      # Set log level and enable API
      - "--api.insecure=true" # set to 'false' on production
      - "--api.dashboard=true" # see https://docs.traefik.io/v2.0/operations/dashboard/#secure-mode for how to secure the dashboard
      - "--api.debug=true" # enable additional endpoints for debugging and profiling
      - "--log.level=DEBUG" # debug while we get it working
      - "--accesslog=true"
      # Define docker provider
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.network=public"
      - "--providers.docker.watch=true"
#      - "--providers.docker.exposedbydefault=false"
#      - "--providers.docker.domain=docker.home"
      # Define entrypoints
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      # Disable SSL verification on backend
      - "--serverstransport.insecureskipverify=true"
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - public
#    labels:
  #      - "traefik.enable=true"
  #      - "traefik.http.routers.api.entrypoints=http"
  #      - "traefik.http.routers.api.rule=Host(`traefik.docker.home`)"
  #      - "traefik.http.routers.api.service=api@internal"

  whoami:
    image: "containous/whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=http"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.home`)"
    #      - "traefik.http.services.whoami.loadbalancer.server.port=80" # it seems you always need to give traefik a port so it 'notices' the service
    networks:
      - public
    deploy:
      replicas: 1

networks:
  public:
    external: true

version: '3.2'

services:
  portainer:
    image: portainer/portainer:1.23.0
    ports:
      - "9000:9000"
    command: -H "tcp://tasks.agent:9001" --tlsskipverify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - net
      - main
    deploy:
      replicas: 1
      labels:
        com.byjg.easyhaproxy.definitions: "http"
        com.byjg.easyhaproxy.port.http: "80"
        com.byjg.easyhaproxy.host.http: "portainer.local"
        com.byjg.easyhaproxy.localport.http: "9000"
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 10M

  agent:
    image: portainer/agent:1.5.1
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
      CAP_HOST_MANAGEMENT: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - net
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 10M

volumes:
  portainer_data:

networks:
  main:
    external: true
  net:
    driver: overlay
    attachable: true